(()=>{"use strict";var t={890:(t,n,e)=>{e.d(n,{Z:()=>b});var r=e(537),o=e.n(r),a=e(645),i=e.n(a),s=e(667),d=e.n(s),c=new URL(e(627),e.b),l=new URL(e(842),e.b),A=new URL(e(767),e.b),u=new URL(e(90),e.b),m=i()(o()),g=d()(c),p=d()(l),h=d()(A),f=d()(u);m.push([t.id,"*{\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n@font-face{\r\n    font-family: 'Poppins-Regular';\r\n    src: url("+g+") format('woff'), url("+p+") format('woff2');\r\n    font-weight: 600;\r\n    font-style: normal;\r\n}\r\n\r\n@font-face{\r\n    font-family: 'Poppins-Bold';\r\n    src: url("+h+") format('woff'), url("+f+') format(\'woff2\');\r\n    font-weight: 700;\r\n    font-style: bold;\r\n}\r\n:root{\r\n    --ff-primary-regular: "Poppins-Regular";\r\n    --ff-primary-bold: "Poppins-Bold";\r\n    --ff-primary:\'Poppins\', sans-serif;\r\n    --dark: #000;\r\n    --light: #F9FAFB;\r\n    --gray: #DEE3EC;\r\n    --dark-gray: #6d6f71;\r\n    --red: rgb(215, 3, 3);\r\n    --teal: #39DAD0;\r\n    --blue: rgb(37, 118, 247);\r\n    --fc-sub-title: var(--blue);\r\n    --side-bar-max-width: 300px;\r\n}\r\nh1, h2, h3, h4, h5{\r\n    font-family: var(--ff-primary-bold);\r\n    color: var(--dark);\r\n}\r\np, a, li, label, button{\r\n    font-family: var(--ff-primary-regular);\r\n}\r\n\r\na{\r\n    text-decoration: none;\r\n}\r\n\r\nul{\r\n    list-style: none;\r\n}\r\n\r\n.text-decoration-line-through{\r\n    text-decoration: line-through;\r\n}\r\n.grid{\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-areas: \r\n    "side-bar main"\r\n    "side-bar main";\r\n    height: 100vh;\r\n\r\n}\r\n\r\nheader{\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    grid-area: header;\r\n}\r\n\r\n.title{\r\n    margin-top: 1.5rem;\r\n    padding: 0 1.5rem;\r\n}\r\n.side-bar{\r\n    grid-area: side-bar;\r\n    background-color: var(--gray);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: left;\r\n    gap: 1.5rem;\r\n}\r\n\r\n.nav-bar-menu\r\n{\r\n    padding: 1.2rem .6rem;\r\n}\r\n.mobile-nav-toggle{\r\n    display: none;\r\n}\r\n.mobile-nav-toggle img[aria-hidden="false"]{\r\n    display: none;\r\n}\r\n.mobile-nav-toggle img[aria-hidden="true"]{\r\n    display: block;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    .grid{\r\n        grid-template-columns: 1fr;\r\n    }\r\n    .mobile-nav-toggle{\r\n        display: block;\r\n        position: fixed;\r\n        top: 10px;\r\n        right: 10px;\r\n        z-index: 10;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        border: none;\r\n        padding: .5em;\r\n    }\r\n    .mobile-nav-toggle:hover, .mobile-nav-toggle:focus{\r\n        background-color: lightblue;\r\n    }\r\n\r\n}\r\n.nav-list{\r\n    padding-bottom: 3.2rem;\r\n}\r\n.nav-item{\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.2rem;\r\n    cursor: pointer;\r\n    padding: .5rem 1.5rem;\r\n\r\n}\r\n.nav-item span{\r\n    font-family: var(--ff-primary-bold);\r\n}\r\n\r\n.project-nav-title{\r\n    font-family: var(--ff-primary-bold);\r\n    padding: 0 1.5rem;\r\n    font-size: 1.2rem;\r\n    position: relative;\r\n}\r\n.project-list-item, .nav-item{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: .8rem;\r\n    font-family: var(--ff-primary-regular);\r\n    /* padding: .5rem 1.5rem; */\r\n}\r\n.project-list-item{\r\n    justify-content: space-between;\r\n}\r\n.project-list-item a{\r\n    padding: .5rem 1.5rem;\r\n}\r\n.project-list-item:hover, \r\n.project-list-item:focus, \r\n.nav-item:hover, \r\n.nav-item:focus{\r\n    background-color: var(--dark-gray);\r\n    outline: var(--dark-gray) 1px solid;\r\n    border-radius: 5px;\r\n}\r\n.project-trash-btn{\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    padding: 0.3rem;\r\n\r\n}\r\n.project-trash-btn:hover,\r\n.project-trash-btn:focus{\r\n    background-color: var(--gray);\r\n    border-radius: 50%;\r\n}\r\n.project-trash{\r\n    height: 16px;\r\n}\r\n.nav-item-icon{\r\n    width: 1.5rem;\r\n}\r\n\r\n@media (max-width: 55em)\r\n{\r\n    .grid{\r\n        display: block;\r\n    }\r\n    .side-bar{\r\n        display: none;\r\n        z-index: 2;\r\n        position: fixed;\r\n        top: 0;\r\n        width: 100%;\r\n    }\r\n    .side-bar[data-visible]\r\n    {\r\n        display: block;\r\n        height: 100%;\r\n    }\r\n    .side-bar .title{\r\n        text-align: center;\r\n        padding-bottom: 1.5rem;\r\n    }\r\n    .nav-item{\r\n        font-size: 1.3rem;\r\n        justify-content: left;\r\n    }\r\n    .nav-item-icon{\r\n        width: 2rem;\r\n    }\r\n    \r\n}\r\n.project-nav-container{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.add-project-btn{\r\n    font-family: var(--ff-primary-bold);\r\n    line-height: 1.5;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 35px;\r\n    height: 29px;\r\n    border-radius: 15px;\r\n    \r\n}\r\n.add-project-btn:hover,\r\n.add-project-btn:focus{\r\n    background-color: var(--light);\r\n}\r\n#projects h3{\r\n    font-size: 1rem;\r\n}\r\n.intro-container{\r\n    width: 100%;\r\n    max-width: 70vh;\r\n    padding-bottom: 1.5rem;\r\n}\r\n.intro-container h1{\r\n    font-size: 3.6rem;\r\n    padding-bottom: 1.5rem;\r\n}\r\n.intro-container p{\r\n    line-height: 1.5;\r\n    padding-bottom: .8rem;\r\n}\r\n.project-btn-primary:hover,\r\n.project-btn-primary:focus{\r\n    background-color: var(--light);\r\n    color: var(--dark);\r\n    border: 2px solid blue;\r\n}\r\n.project-btn-primary{\r\n    font-size: .9rem;\r\n    color: var(--light);\r\n    padding: 1rem 1.4rem;\r\n    background-color: blue;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    .project-list-item{\r\n        padding-right: 12px;\r\n    }\r\n}\r\n.title{\r\n    line-height: 1.5;\r\n}\r\n\r\n/* -------------------------Inbox Today and Upcoming Style -------------------------------------- */\r\n.page-title{\r\n    font-size: 2.5rem;\r\n    padding-bottom: 36px;\r\n}\r\n\r\n.table{\r\n    display: grid;\r\n    grid-template-columns: 2fr 1fr 1fr;\r\n    grid-template-rows: auto;\r\n}\r\n.row-title{\r\n    font-size: 1.2rem;\r\n    color: var(--blue);\r\n}\r\n.table .col:nth-child(-n+2){\r\n    border-right: 2px solid var(--dark-gray);\r\n}\r\n.table .row:first-child{\r\n    border-bottom: 2px solid var(--dark-gray);\r\n}\r\n.table .row{\r\n    padding: 8px 0 8px 8px;\r\n    height: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n.body{\r\n    width: 80%;\r\n    max-width: 70vh;\r\n    grid-area: main;\r\n    padding: 5rem 2rem;\r\n    margin-inline: auto;\r\n\r\n}\r\n\r\n.project-header{\r\n    padding-bottom: 3rem;\r\n}\r\n.project-title{\r\n    text-transform: capitalize;\r\n    font-size: 2.8rem;\r\n    line-height: 1.5;\r\n}\r\n.project-description{\r\n    font-family: var(--ff-primary-regular);\r\n    font-size: 1rem;\r\n}\r\n/* ---------------- Project task items ---------------- */\r\n.project-task{\r\n    padding-bottom: 3rem;\r\n}\r\n.note-container,\r\n.task-container{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid gray;\r\n}\r\n.note-title,\r\n.task-title{\r\n    padding: .3rem 0;\r\n    color: var(--fc-sub-title);\r\n}\r\n\r\n.note-toggle-btn,\r\n.task-toggle-btn{\r\n    font-size: 1.2rem;\r\n    border: none;\r\n    background: none;\r\n    cursor: pointer;\r\n    width: 30px;\r\n}\r\n.task-toggle-btn:hover, .task-toggle-btn:focus,\r\n.note-toggle-btn:hover, .note-toggle-btn:focus{\r\n    color: white;\r\n    border: 1px solid lightgray;\r\n    background-color: lightgray;\r\n    border-radius: 100%;\r\n}\r\n.note-list,\r\n.task-list{\r\n    margin-top: 1.5rem;\r\n    line-height: 2;\r\n}\r\n.note-item,\r\n.task-item{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-left: .2rem;\r\n}\r\n.task-item:hover,\r\n.task-item:focus,\r\n.note-item:hover,\r\n.note-item:focus{\r\n \r\n    border-radius: 5px;\r\n    background-color: lightgray;\r\n}\r\n.note-item-container,\r\n.task-item-container{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n@media (max-width: 55em){\r\n    .task-item-mov-toggle{\r\n        display: none;\r\n    }\r\n}\r\n.checkbox{\r\n    display: flex;\r\n    align-items: center;\r\n    background: none;\r\n    border: 2px solid gray;\r\n    border-radius: 5px;\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n.checkbox img, .task-item-btn img, .note-trash-btn img{\r\n    height: 1rem;\r\n    width: 1rem;\r\n}\r\n.note-trash-btn,\r\n.task-item-btn{\r\n    display: flex;\r\n    align-items: center;\r\n    padding: .3rem;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.note-trash-btn:focus, .note-trash-btn:hover,\r\n.task-item-btn:focus, .task-item-btn:hover{\r\n    background-color: var(--gray);\r\n    outline: 1px solid var(--gray);\r\n    border-radius: 5px;\r\n}\r\n\r\n.item-input{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 10px;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    .item-input{\r\n        flex-direction: column;\r\n    }\r\n}\r\n.input-container{\r\n    width: 100%;\r\n}\r\n.note-input,\r\n.todo-input{\r\n    font-family: var(--ff-primary-regular);\r\n    font-size: .9rem;\r\n    border: 1px solid var(--gray);\r\n    height: 40px;\r\n}\r\n.input-container input[type="text"]{\r\n    padding-left: .5rem;\r\n}\r\n.note-input{\r\n    width: 95%;\r\n}\r\n.input-container{\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n.input-container #task-name{\r\n    width: 70%;\r\n}\r\n\r\n\r\n\r\n\r\n/* To do section */\r\n\r\n.task-item-input input:hover,\r\n.task-item-input input:focus,\r\n.task-item-input input:visited{\r\n    border: 2px solid lightblue;\r\n}\r\n.todo-nav-container{\r\n    display: flex;\r\n    gap: 10px;\r\n    height: 40px;\r\n}\r\n.submit-button,\r\n.cancel-button{\r\n    cursor: pointer;\r\n    color: var(--light);\r\n    border-radius: 5px;\r\n    width: 80px;\r\n    padding: .8rem 0;\r\n}\r\n\r\n.submit-button{\r\n    background-color: green;\r\n    border: 1px solid green;\r\n}\r\n.cancel-button{\r\n    background-color: var(--red);\r\n    border: 1px solid var(--red);\r\n}\r\n\r\n\r\n/* Project Forms */\r\n\r\n.add-project-window:after{\r\n    content: "";\r\n    position: fixed;\r\n    inset: 0 0 0 0;\r\n    background-color: rgba(0, 0, 0, 0.303);   \r\n}\r\n\r\n.add-project{\r\n    position: fixed;\r\n    top: 30%;\r\n    width: 250px;\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n    align-items: center;\r\n    gap: .9rem;\r\n    border: 2px solid var(--dark);\r\n    padding: 3rem 5rem;\r\n    border-radius: 10px;\r\n    background-color: var(--light);\r\n    z-index: 10;\r\n}\r\n.project-btn{\r\n    text-align: left;\r\n    width: 100%;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.project-btn span{\r\n    font-family: var(--ff-primary-regular);\r\n    font-size: 1rem;\r\n    text-transform: capitalize;\r\n}\r\n\r\n.form-item{\r\n    display: grid;\r\n    width: 250px;\r\n}\r\n.form-items{\r\n    padding-bottom: .5rem;\r\n}\r\n\r\n.form-item input[type="text"],\r\n.form-item input[type="date"],\r\n.form-item textarea{\r\n    font-family: var(--ff-primary);\r\n    padding: .3rem .5rem;\r\n}\r\n.form-item textarea{\r\n    height: 100px;\r\n\r\n}\r\n.close-btn{\r\n    position: absolute;\r\n    z-index: 10000;\r\n    top: 10px;\r\n    right: 10px;\r\n    padding: .08rem .5rem;\r\n    color:var(--gray);\r\n    background-color: var(--red);\r\n    border: 1px solid var(--red);\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n.close-btn:focus,\r\n.close-btn:hover{\r\n    background-color: var(--light);\r\n    color: var(--dark)\r\n}\r\n.add-project-submit-btn{\r\n    margin-inline: auto;\r\n    color: var(--light);\r\n    background-color: green;\r\n    padding: .5rem .8rem;\r\n    border-radius: 5px;\r\n    border: 1px solid green;\r\n    cursor: pointer;\r\n}\r\n.add-project-submit-btn:hover,\r\n.add-project-submit-btn:focus{\r\n    background-color: var(--light);\r\n    color: var(--dark);\r\n}\r\n\r\nfooter{\r\n    font-family: var(--ff-primary);\r\n    color: var(--dark);\r\n    font-size: .9rem;\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 280px;\r\n    padding-bottom: 30px;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    footer{\r\n        width: 100%;\r\n    }\r\n \r\n}\r\n.footer-container{\r\n    margin-inline: auto;\r\n}\r\n\r\n.attributes{\r\n    text-decoration: none;\r\n    color: var(--dark);\r\n    padding: .8rem 0;\r\n    text-align: center;\r\n}\r\n.attributes a{\r\n    text-decoration: none;\r\n    color: var(--dark);\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n/* ------------------  Todo Inbox, Today, Upcoming, Anytime and Someday page ----------------- */\r\n\r\n.todo-even-columns{\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n}\r\n\r\n.todo-rows{\r\n    padding: .5rem 0;\r\n}\r\n.todo-title-text{\r\n    font-family: var(--ff-primary-bold);\r\n    color: var(--dark);\r\n    line-height: 1.5;\r\n}\r\n.project-title-text{\r\n    color: var(--dark-gray);\r\n    text-transform: capitalize;\r\n}\r\n\r\n.hidden{\r\n    display: none;\r\n}',"",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,8BAA8B;IAC9B,oHAA+H;IAC/H,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,2BAA2B;IAC3B,oHAAyH;IACzH,gBAAgB;IAChB,gBAAgB;AACpB;AACA;IACI,uCAAuC;IACvC,iCAAiC;IACjC,kCAAkC;IAClC,YAAY;IACZ,gBAAgB;IAChB,eAAe;IACf,oBAAoB;IACpB,qBAAqB;IACrB,eAAe;IACf,yBAAyB;IACzB,2BAA2B;IAC3B,2BAA2B;AAC/B;AACA;IACI,mCAAmC;IACnC,kBAAkB;AACtB;AACA;IACI,sCAAsC;AAC1C;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,6BAA6B;AACjC;AACA;IACI,kBAAkB;IAClB,aAAa;IACb,gCAAgC;IAChC;;mBAEe;IACf,aAAa;;AAEjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;AACA;IACI,mBAAmB;IACnB,6BAA6B;IAC7B,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,WAAW;AACf;;AAEA;;IAEI,qBAAqB;AACzB;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;AACjB;AACA;IACI,cAAc;AAClB;AACA;;IAEI;QACI,0BAA0B;IAC9B;IACA;QACI,cAAc;QACd,eAAe;QACf,SAAS;QACT,WAAW;QACX,WAAW;QACX,eAAe;QACf,uBAAuB;QACvB,YAAY;QACZ,aAAa;IACjB;IACA;QACI,2BAA2B;IAC/B;;AAEJ;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,qBAAqB;;AAEzB;AACA;IACI,mCAAmC;AACvC;;AAEA;IACI,mCAAmC;IACnC,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,sCAAsC;IACtC,2BAA2B;AAC/B;AACA;IACI,8BAA8B;AAClC;AACA;IACI,qBAAqB;AACzB;AACA;;;;IAII,kCAAkC;IAClC,mCAAmC;IACnC,kBAAkB;AACtB;AACA;IACI,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,eAAe;;AAEnB;AACA;;IAEI,6BAA6B;IAC7B,kBAAkB;AACtB;AACA;IACI,YAAY;AAChB;AACA;IACI,aAAa;AACjB;;AAEA;;IAEI;QACI,cAAc;IAClB;IACA;QACI,aAAa;QACb,UAAU;QACV,eAAe;QACf,MAAM;QACN,WAAW;IACf;IACA;;QAEI,cAAc;QACd,YAAY;IAChB;IACA;QACI,kBAAkB;QAClB,sBAAsB;IAC1B;IACA;QACI,iBAAiB;QACjB,qBAAqB;IACzB;IACA;QACI,WAAW;IACf;;AAEJ;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;AACA;IACI,mCAAmC;IACnC,gBAAgB;IAChB,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,WAAW;IACX,YAAY;IACZ,mBAAmB;;AAEvB;AACA;;IAEI,8BAA8B;AAClC;AACA;IACI,eAAe;AACnB;AACA;IACI,WAAW;IACX,eAAe;IACf,sBAAsB;AAC1B;AACA;IACI,iBAAiB;IACjB,sBAAsB;AAC1B;AACA;IACI,gBAAgB;IAChB,qBAAqB;AACzB;AACA;;IAEI,8BAA8B;IAC9B,kBAAkB;IAClB,sBAAsB;AAC1B;AACA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,oBAAoB;IACpB,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,eAAe;AACnB;AACA;;IAEI;QACI,mBAAmB;IACvB;AACJ;AACA;IACI,gBAAgB;AACpB;;AAEA,mGAAmG;AACnG;IACI,iBAAiB;IACjB,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,wBAAwB;AAC5B;AACA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,wCAAwC;AAC5C;AACA;IACI,yCAAyC;AAC7C;AACA;IACI,sBAAsB;IACtB,YAAY;IACZ,aAAa;IACb,mBAAmB;AACvB;AACA;IACI,UAAU;IACV,eAAe;IACf,eAAe;IACf,kBAAkB;IAClB,mBAAmB;;AAEvB;;AAEA;IACI,oBAAoB;AACxB;AACA;IACI,0BAA0B;IAC1B,iBAAiB;IACjB,gBAAgB;AACpB;AACA;IACI,sCAAsC;IACtC,eAAe;AACnB;AACA,yDAAyD;AACzD;IACI,oBAAoB;AACxB;AACA;;IAEI,aAAa;IACb,8BAA8B;IAC9B,6BAA6B;AACjC;AACA;;IAEI,gBAAgB;IAChB,0BAA0B;AAC9B;;AAEA;;IAEI,iBAAiB;IACjB,YAAY;IACZ,gBAAgB;IAChB,eAAe;IACf,WAAW;AACf;AACA;;IAEI,YAAY;IACZ,2BAA2B;IAC3B,2BAA2B;IAC3B,mBAAmB;AACvB;AACA;;IAEI,kBAAkB;IAClB,cAAc;AAClB;AACA;;IAEI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;AACA;;;;;IAKI,kBAAkB;IAClB,2BAA2B;AAC/B;AACA;;IAEI,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;AACA;IACI;QACI,aAAa;IACjB;AACJ;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,sBAAsB;IACtB,kBAAkB;IAClB,YAAY;IACZ,WAAW;AACf;AACA;IACI,YAAY;IACZ,WAAW;AACf;AACA;;IAEI,aAAa;IACb,mBAAmB;IACnB,cAAc;IACd,gBAAgB;IAChB,YAAY;IACZ,eAAe;AACnB;AACA;;IAEI,6BAA6B;IAC7B,8BAA8B;IAC9B,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;AACA;;IAEI;QACI,sBAAsB;IAC1B;AACJ;AACA;IACI,WAAW;AACf;AACA;;IAEI,sCAAsC;IACtC,gBAAgB;IAChB,6BAA6B;IAC7B,YAAY;AAChB;AACA;IACI,mBAAmB;AACvB;AACA;IACI,UAAU;AACd;AACA;IACI,aAAa;IACb,SAAS;AACb;AACA;IACI,UAAU;AACd;;;;;AAKA,kBAAkB;;AAElB;;;IAGI,2BAA2B;AAC/B;AACA;IACI,aAAa;IACb,SAAS;IACT,YAAY;AAChB;AACA;;IAEI,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,uBAAuB;AAC3B;AACA;IACI,4BAA4B;IAC5B,4BAA4B;AAChC;;;AAGA,kBAAkB;;AAElB;IACI,WAAW;IACX,eAAe;IACf,cAAc;IACd,sCAAsC;AAC1C;;AAEA;IACI,eAAe;IACf,QAAQ;IACR,YAAY;;IAEZ,aAAa;IACb,sBAAsB;IACtB,uBAAuB;;IAEvB,mBAAmB;IACnB,UAAU;IACV,6BAA6B;IAC7B,kBAAkB;IAClB,mBAAmB;IACnB,8BAA8B;IAC9B,WAAW;AACf;AACA;IACI,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,YAAY;IACZ,eAAe;AACnB;AACA;IACI,sCAAsC;IACtC,eAAe;IACf,0BAA0B;AAC9B;;AAEA;IACI,aAAa;IACb,YAAY;AAChB;AACA;IACI,qBAAqB;AACzB;;AAEA;;;IAGI,8BAA8B;IAC9B,oBAAoB;AACxB;AACA;IACI,aAAa;;AAEjB;AACA;IACI,kBAAkB;IAClB,cAAc;IACd,SAAS;IACT,WAAW;IACX,qBAAqB;IACrB,iBAAiB;IACjB,4BAA4B;IAC5B,4BAA4B;IAC5B,kBAAkB;IAClB,eAAe;AACnB;AACA;;IAEI,8BAA8B;IAC9B;AACJ;AACA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,uBAAuB;IACvB,oBAAoB;IACpB,kBAAkB;IAClB,uBAAuB;IACvB,eAAe;AACnB;AACA;;IAEI,8BAA8B;IAC9B,kBAAkB;AACtB;;AAEA;IACI,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;IAClB,SAAS;IACT,YAAY;IACZ,oBAAoB;AACxB;AACA;;IAEI;QACI,WAAW;IACf;;AAEJ;AACA;IACI,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;IAChB,kBAAkB;AACtB;AACA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,eAAe;AACnB;;;AAGA,gGAAgG;;AAEhG;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;AACA;IACI,mCAAmC;IACnC,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,uBAAuB;IACvB,0BAA0B;AAC9B;;AAEA;IACI,aAAa;AACjB",sourcesContent:["*{\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n@font-face{\r\n    font-family: 'Poppins-Regular';\r\n    src: url('../fonts/poppins-regular-webfont.woff') format('woff'), url('../fonts/poppins-regular-webfont.woff2') format('woff2');\r\n    font-weight: 600;\r\n    font-style: normal;\r\n}\r\n\r\n@font-face{\r\n    font-family: 'Poppins-Bold';\r\n    src: url('../fonts/poppins-bold-webfont.woff') format('woff'), url('../fonts/poppins-bold-webfont.woff2') format('woff2');\r\n    font-weight: 700;\r\n    font-style: bold;\r\n}\r\n:root{\r\n    --ff-primary-regular: \"Poppins-Regular\";\r\n    --ff-primary-bold: \"Poppins-Bold\";\r\n    --ff-primary:'Poppins', sans-serif;\r\n    --dark: #000;\r\n    --light: #F9FAFB;\r\n    --gray: #DEE3EC;\r\n    --dark-gray: #6d6f71;\r\n    --red: rgb(215, 3, 3);\r\n    --teal: #39DAD0;\r\n    --blue: rgb(37, 118, 247);\r\n    --fc-sub-title: var(--blue);\r\n    --side-bar-max-width: 300px;\r\n}\r\nh1, h2, h3, h4, h5{\r\n    font-family: var(--ff-primary-bold);\r\n    color: var(--dark);\r\n}\r\np, a, li, label, button{\r\n    font-family: var(--ff-primary-regular);\r\n}\r\n\r\na{\r\n    text-decoration: none;\r\n}\r\n\r\nul{\r\n    list-style: none;\r\n}\r\n\r\n.text-decoration-line-through{\r\n    text-decoration: line-through;\r\n}\r\n.grid{\r\n    position: relative;\r\n    display: grid;\r\n    grid-template-columns: 300px 1fr;\r\n    grid-template-areas: \r\n    \"side-bar main\"\r\n    \"side-bar main\";\r\n    height: 100vh;\r\n\r\n}\r\n\r\nheader{\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    grid-area: header;\r\n}\r\n\r\n.title{\r\n    margin-top: 1.5rem;\r\n    padding: 0 1.5rem;\r\n}\r\n.side-bar{\r\n    grid-area: side-bar;\r\n    background-color: var(--gray);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: left;\r\n    gap: 1.5rem;\r\n}\r\n\r\n.nav-bar-menu\r\n{\r\n    padding: 1.2rem .6rem;\r\n}\r\n.mobile-nav-toggle{\r\n    display: none;\r\n}\r\n.mobile-nav-toggle img[aria-hidden=\"false\"]{\r\n    display: none;\r\n}\r\n.mobile-nav-toggle img[aria-hidden=\"true\"]{\r\n    display: block;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    .grid{\r\n        grid-template-columns: 1fr;\r\n    }\r\n    .mobile-nav-toggle{\r\n        display: block;\r\n        position: fixed;\r\n        top: 10px;\r\n        right: 10px;\r\n        z-index: 10;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        border: none;\r\n        padding: .5em;\r\n    }\r\n    .mobile-nav-toggle:hover, .mobile-nav-toggle:focus{\r\n        background-color: lightblue;\r\n    }\r\n\r\n}\r\n.nav-list{\r\n    padding-bottom: 3.2rem;\r\n}\r\n.nav-item{\r\n    display: flex;\r\n    align-items: center;\r\n    font-size: 1.2rem;\r\n    cursor: pointer;\r\n    padding: .5rem 1.5rem;\r\n\r\n}\r\n.nav-item span{\r\n    font-family: var(--ff-primary-bold);\r\n}\r\n\r\n.project-nav-title{\r\n    font-family: var(--ff-primary-bold);\r\n    padding: 0 1.5rem;\r\n    font-size: 1.2rem;\r\n    position: relative;\r\n}\r\n.project-list-item, .nav-item{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: .8rem;\r\n    font-family: var(--ff-primary-regular);\r\n    /* padding: .5rem 1.5rem; */\r\n}\r\n.project-list-item{\r\n    justify-content: space-between;\r\n}\r\n.project-list-item a{\r\n    padding: .5rem 1.5rem;\r\n}\r\n.project-list-item:hover, \r\n.project-list-item:focus, \r\n.nav-item:hover, \r\n.nav-item:focus{\r\n    background-color: var(--dark-gray);\r\n    outline: var(--dark-gray) 1px solid;\r\n    border-radius: 5px;\r\n}\r\n.project-trash-btn{\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    padding: 0.3rem;\r\n\r\n}\r\n.project-trash-btn:hover,\r\n.project-trash-btn:focus{\r\n    background-color: var(--gray);\r\n    border-radius: 50%;\r\n}\r\n.project-trash{\r\n    height: 16px;\r\n}\r\n.nav-item-icon{\r\n    width: 1.5rem;\r\n}\r\n\r\n@media (max-width: 55em)\r\n{\r\n    .grid{\r\n        display: block;\r\n    }\r\n    .side-bar{\r\n        display: none;\r\n        z-index: 2;\r\n        position: fixed;\r\n        top: 0;\r\n        width: 100%;\r\n    }\r\n    .side-bar[data-visible]\r\n    {\r\n        display: block;\r\n        height: 100%;\r\n    }\r\n    .side-bar .title{\r\n        text-align: center;\r\n        padding-bottom: 1.5rem;\r\n    }\r\n    .nav-item{\r\n        font-size: 1.3rem;\r\n        justify-content: left;\r\n    }\r\n    .nav-item-icon{\r\n        width: 2rem;\r\n    }\r\n    \r\n}\r\n.project-nav-container{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.add-project-btn{\r\n    font-family: var(--ff-primary-bold);\r\n    line-height: 1.5;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 35px;\r\n    height: 29px;\r\n    border-radius: 15px;\r\n    \r\n}\r\n.add-project-btn:hover,\r\n.add-project-btn:focus{\r\n    background-color: var(--light);\r\n}\r\n#projects h3{\r\n    font-size: 1rem;\r\n}\r\n.intro-container{\r\n    width: 100%;\r\n    max-width: 70vh;\r\n    padding-bottom: 1.5rem;\r\n}\r\n.intro-container h1{\r\n    font-size: 3.6rem;\r\n    padding-bottom: 1.5rem;\r\n}\r\n.intro-container p{\r\n    line-height: 1.5;\r\n    padding-bottom: .8rem;\r\n}\r\n.project-btn-primary:hover,\r\n.project-btn-primary:focus{\r\n    background-color: var(--light);\r\n    color: var(--dark);\r\n    border: 2px solid blue;\r\n}\r\n.project-btn-primary{\r\n    font-size: .9rem;\r\n    color: var(--light);\r\n    padding: 1rem 1.4rem;\r\n    background-color: blue;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    .project-list-item{\r\n        padding-right: 12px;\r\n    }\r\n}\r\n.title{\r\n    line-height: 1.5;\r\n}\r\n\r\n/* -------------------------Inbox Today and Upcoming Style -------------------------------------- */\r\n.page-title{\r\n    font-size: 2.5rem;\r\n    padding-bottom: 36px;\r\n}\r\n\r\n.table{\r\n    display: grid;\r\n    grid-template-columns: 2fr 1fr 1fr;\r\n    grid-template-rows: auto;\r\n}\r\n.row-title{\r\n    font-size: 1.2rem;\r\n    color: var(--blue);\r\n}\r\n.table .col:nth-child(-n+2){\r\n    border-right: 2px solid var(--dark-gray);\r\n}\r\n.table .row:first-child{\r\n    border-bottom: 2px solid var(--dark-gray);\r\n}\r\n.table .row{\r\n    padding: 8px 0 8px 8px;\r\n    height: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n.body{\r\n    width: 80%;\r\n    max-width: 70vh;\r\n    grid-area: main;\r\n    padding: 5rem 2rem;\r\n    margin-inline: auto;\r\n\r\n}\r\n\r\n.project-header{\r\n    padding-bottom: 3rem;\r\n}\r\n.project-title{\r\n    text-transform: capitalize;\r\n    font-size: 2.8rem;\r\n    line-height: 1.5;\r\n}\r\n.project-description{\r\n    font-family: var(--ff-primary-regular);\r\n    font-size: 1rem;\r\n}\r\n/* ---------------- Project task items ---------------- */\r\n.project-task{\r\n    padding-bottom: 3rem;\r\n}\r\n.note-container,\r\n.task-container{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid gray;\r\n}\r\n.note-title,\r\n.task-title{\r\n    padding: .3rem 0;\r\n    color: var(--fc-sub-title);\r\n}\r\n\r\n.note-toggle-btn,\r\n.task-toggle-btn{\r\n    font-size: 1.2rem;\r\n    border: none;\r\n    background: none;\r\n    cursor: pointer;\r\n    width: 30px;\r\n}\r\n.task-toggle-btn:hover, .task-toggle-btn:focus,\r\n.note-toggle-btn:hover, .note-toggle-btn:focus{\r\n    color: white;\r\n    border: 1px solid lightgray;\r\n    background-color: lightgray;\r\n    border-radius: 100%;\r\n}\r\n.note-list,\r\n.task-list{\r\n    margin-top: 1.5rem;\r\n    line-height: 2;\r\n}\r\n.note-item,\r\n.task-item{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-left: .2rem;\r\n}\r\n.task-item:hover,\r\n.task-item:focus,\r\n.note-item:hover,\r\n.note-item:focus{\r\n \r\n    border-radius: 5px;\r\n    background-color: lightgray;\r\n}\r\n.note-item-container,\r\n.task-item-container{\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n}\r\n@media (max-width: 55em){\r\n    .task-item-mov-toggle{\r\n        display: none;\r\n    }\r\n}\r\n.checkbox{\r\n    display: flex;\r\n    align-items: center;\r\n    background: none;\r\n    border: 2px solid gray;\r\n    border-radius: 5px;\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n.checkbox img, .task-item-btn img, .note-trash-btn img{\r\n    height: 1rem;\r\n    width: 1rem;\r\n}\r\n.note-trash-btn,\r\n.task-item-btn{\r\n    display: flex;\r\n    align-items: center;\r\n    padding: .3rem;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.note-trash-btn:focus, .note-trash-btn:hover,\r\n.task-item-btn:focus, .task-item-btn:hover{\r\n    background-color: var(--gray);\r\n    outline: 1px solid var(--gray);\r\n    border-radius: 5px;\r\n}\r\n\r\n.item-input{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    gap: 10px;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    .item-input{\r\n        flex-direction: column;\r\n    }\r\n}\r\n.input-container{\r\n    width: 100%;\r\n}\r\n.note-input,\r\n.todo-input{\r\n    font-family: var(--ff-primary-regular);\r\n    font-size: .9rem;\r\n    border: 1px solid var(--gray);\r\n    height: 40px;\r\n}\r\n.input-container input[type=\"text\"]{\r\n    padding-left: .5rem;\r\n}\r\n.note-input{\r\n    width: 95%;\r\n}\r\n.input-container{\r\n    display: flex;\r\n    gap: 10px;\r\n}\r\n.input-container #task-name{\r\n    width: 70%;\r\n}\r\n\r\n\r\n\r\n\r\n/* To do section */\r\n\r\n.task-item-input input:hover,\r\n.task-item-input input:focus,\r\n.task-item-input input:visited{\r\n    border: 2px solid lightblue;\r\n}\r\n.todo-nav-container{\r\n    display: flex;\r\n    gap: 10px;\r\n    height: 40px;\r\n}\r\n.submit-button,\r\n.cancel-button{\r\n    cursor: pointer;\r\n    color: var(--light);\r\n    border-radius: 5px;\r\n    width: 80px;\r\n    padding: .8rem 0;\r\n}\r\n\r\n.submit-button{\r\n    background-color: green;\r\n    border: 1px solid green;\r\n}\r\n.cancel-button{\r\n    background-color: var(--red);\r\n    border: 1px solid var(--red);\r\n}\r\n\r\n\r\n/* Project Forms */\r\n\r\n.add-project-window:after{\r\n    content: \"\";\r\n    position: fixed;\r\n    inset: 0 0 0 0;\r\n    background-color: rgba(0, 0, 0, 0.303);   \r\n}\r\n\r\n.add-project{\r\n    position: fixed;\r\n    top: 30%;\r\n    width: 250px;\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n\r\n    align-items: center;\r\n    gap: .9rem;\r\n    border: 2px solid var(--dark);\r\n    padding: 3rem 5rem;\r\n    border-radius: 10px;\r\n    background-color: var(--light);\r\n    z-index: 10;\r\n}\r\n.project-btn{\r\n    text-align: left;\r\n    width: 100%;\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n.project-btn span{\r\n    font-family: var(--ff-primary-regular);\r\n    font-size: 1rem;\r\n    text-transform: capitalize;\r\n}\r\n\r\n.form-item{\r\n    display: grid;\r\n    width: 250px;\r\n}\r\n.form-items{\r\n    padding-bottom: .5rem;\r\n}\r\n\r\n.form-item input[type=\"text\"],\r\n.form-item input[type=\"date\"],\r\n.form-item textarea{\r\n    font-family: var(--ff-primary);\r\n    padding: .3rem .5rem;\r\n}\r\n.form-item textarea{\r\n    height: 100px;\r\n\r\n}\r\n.close-btn{\r\n    position: absolute;\r\n    z-index: 10000;\r\n    top: 10px;\r\n    right: 10px;\r\n    padding: .08rem .5rem;\r\n    color:var(--gray);\r\n    background-color: var(--red);\r\n    border: 1px solid var(--red);\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n}\r\n.close-btn:focus,\r\n.close-btn:hover{\r\n    background-color: var(--light);\r\n    color: var(--dark)\r\n}\r\n.add-project-submit-btn{\r\n    margin-inline: auto;\r\n    color: var(--light);\r\n    background-color: green;\r\n    padding: .5rem .8rem;\r\n    border-radius: 5px;\r\n    border: 1px solid green;\r\n    cursor: pointer;\r\n}\r\n.add-project-submit-btn:hover,\r\n.add-project-submit-btn:focus{\r\n    background-color: var(--light);\r\n    color: var(--dark);\r\n}\r\n\r\nfooter{\r\n    font-family: var(--ff-primary);\r\n    color: var(--dark);\r\n    font-size: .9rem;\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 280px;\r\n    padding-bottom: 30px;\r\n}\r\n@media (max-width: 55em)\r\n{\r\n    footer{\r\n        width: 100%;\r\n    }\r\n \r\n}\r\n.footer-container{\r\n    margin-inline: auto;\r\n}\r\n\r\n.attributes{\r\n    text-decoration: none;\r\n    color: var(--dark);\r\n    padding: .8rem 0;\r\n    text-align: center;\r\n}\r\n.attributes a{\r\n    text-decoration: none;\r\n    color: var(--dark);\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n/* ------------------  Todo Inbox, Today, Upcoming, Anytime and Someday page ----------------- */\r\n\r\n.todo-even-columns{\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n}\r\n\r\n.todo-rows{\r\n    padding: .5rem 0;\r\n}\r\n.todo-title-text{\r\n    font-family: var(--ff-primary-bold);\r\n    color: var(--dark);\r\n    line-height: 1.5;\r\n}\r\n.project-title-text{\r\n    color: var(--dark-gray);\r\n    text-transform: capitalize;\r\n}\r\n\r\n.hidden{\r\n    display: none;\r\n}"],sourceRoot:""}]);const b=m},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},667:t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var d=t[s],c=r.base?d[0]+r.base:d[0],l=a[c]||0,A="".concat(c," ").concat(l);a[c]=l+1;var u=e(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var g=o(m,r);r.byIndex=s,n.splice(s,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=e(a[i]);n[s].references--}for(var d=r(t,o),c=0;c<a.length;c++){var l=e(a[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},767:(t,n,e)=>{t.exports=e.p+"fonts/poppins-bold-webfont.woff"},90:(t,n,e)=>{t.exports=e.p+"fonts/poppins-bold-webfont.woff2"},627:(t,n,e)=>{t.exports=e.p+"fonts/poppins-regular-webfont.woff"},842:(t,n,e)=>{t.exports=e.p+"fonts/poppins-regular-webfont.woff2"}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return t[r](a,a.exports,e),a.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),o=e.n(r),a=e(569),i=e.n(a),s=e(565),d=e.n(s),c=e(216),l=e.n(c),A=e(589),u=e.n(A),m=e(890),g={};g.styleTagTransform=u(),g.setAttributes=d(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=l(),n()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;const p=e.p+"images/upcoming.png",h=e.p+"images/inbox.png",f=e.p+"images/today.png",b=e.p+"images/trash.png",C=e.p+"images/check.png",v=e.p+"images/edit.png",B=e.p+"images/icon-hamburger.svg",y=e.p+"images/close.png";class I{static getImage=t=>{switch(t){case"upcoming":return p;case"inbox":return h;case"today":return f;case"trash":return b;case"checkMark":return C;case"edit":return v;case"menu":return B;case"close":return y;default:console.log("no Icons!")}}}class k{constructor(t,n){this.name=t,this.description=n,this.tasks=[],this.notes=[]}getName(){return this.name}getDescription(){return this.description}setTasks(t){return this.tasks=t}setNotes(t){return this.notes=t}getNotes(){return this.notes}getTasks(){return this.tasks}}class w{constructor(){this.projects=[]}setProjects(t){this.projects=t}getProjects(){return this.projects}getProject(t){return this.getProjects().find((n=>n.getName().toLowerCase()==t.toLowerCase()))}add(t,n){this.projects.push(new k(t,n))}remove(t){let n;this.getProjects().forEach(((e,r)=>{e.getName().toLowerCase()===t&&(n=r)})),this.getProjects().splice(n,1)}}function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}function j(t,n){if(n.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+n.length+" present")}function T(t){j(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===x(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function E(t){if(null===t||!0===t||!1===t)return NaN;var n=Number(t);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function S(t){j(1,arguments);var n=T(t),e=n.getUTCDay(),r=(e<1?7:0)+e-1;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function P(t){j(1,arguments);var n=T(t),e=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var o=S(r),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var i=S(a);return n.getTime()>=o.getTime()?e+1:n.getTime()>=i.getTime()?e:e-1}var M={};function D(){return M}function L(t,n){var e,r,o,a,i,s,d,c;j(1,arguments);var l=D(),A=E(null!==(e=null!==(r=null!==(o=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==e?e:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=T(t),m=u.getUTCDay(),g=(m<A?7:0)+m-A;return u.setUTCDate(u.getUTCDate()-g),u.setUTCHours(0,0,0,0),u}function N(t,n){var e,r,o,a,i,s,d,c;j(1,arguments);var l=T(t),A=l.getUTCFullYear(),u=D(),m=E(null!==(e=null!==(r=null!==(o=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var g=new Date(0);g.setUTCFullYear(A+1,0,m),g.setUTCHours(0,0,0,0);var p=L(g,n),h=new Date(0);h.setUTCFullYear(A,0,m),h.setUTCHours(0,0,0,0);var f=L(h,n);return l.getTime()>=p.getTime()?A+1:l.getTime()>=f.getTime()?A:A-1}function q(t,n){for(var e=t<0?"-":"",r=Math.abs(t).toString();r.length<n;)r="0"+r;return e+r}const W=function(t,n){var e=t.getUTCFullYear(),r=e>0?e:1-e;return q("yy"===n?r%100:r,n.length)},U=function(t,n){var e=t.getUTCMonth();return"M"===n?String(e+1):q(e+1,2)},Y=function(t,n){return q(t.getUTCDate(),n.length)},z=function(t,n){return q(t.getUTCHours()%12||12,n.length)},F=function(t,n){return q(t.getUTCHours(),n.length)},H=function(t,n){return q(t.getUTCMinutes(),n.length)},O=function(t,n){return q(t.getUTCSeconds(),n.length)},Q=function(t,n){var e=n.length,r=t.getUTCMilliseconds();return q(Math.floor(r*Math.pow(10,e-3)),n.length)};var $={G:function(t,n,e){var r=t.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(t,n,e){if("yo"===n){var r=t.getUTCFullYear(),o=r>0?r:1-r;return e.ordinalNumber(o,{unit:"year"})}return W(t,n)},Y:function(t,n,e,r){var o=N(t,r),a=o>0?o:1-o;return"YY"===n?q(a%100,2):"Yo"===n?e.ordinalNumber(a,{unit:"year"}):q(a,n.length)},R:function(t,n){return q(P(t),n.length)},u:function(t,n){return q(t.getUTCFullYear(),n.length)},Q:function(t,n,e){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return q(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,n,e){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return q(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,n,e){var r=t.getUTCMonth();switch(n){case"M":case"MM":return U(t,n);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(t,n,e){var r=t.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return q(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,e,r){var o=function(t,n){j(1,arguments);var e=T(t),r=L(e,n).getTime()-function(t,n){var e,r,o,a,i,s,d,c;j(1,arguments);var l=D(),A=E(null!==(e=null!==(r=null!==(o=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1),u=N(t,n),m=new Date(0);return m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0),L(m,n)}(e,n).getTime();return Math.round(r/6048e5)+1}(t,r);return"wo"===n?e.ordinalNumber(o,{unit:"week"}):q(o,n.length)},I:function(t,n,e){var r=function(t){j(1,arguments);var n=T(t),e=S(n).getTime()-function(t){j(1,arguments);var n=P(t),e=new Date(0);return e.setUTCFullYear(n,0,4),e.setUTCHours(0,0,0,0),S(e)}(n).getTime();return Math.round(e/6048e5)+1}(t);return"Io"===n?e.ordinalNumber(r,{unit:"week"}):q(r,n.length)},d:function(t,n,e){return"do"===n?e.ordinalNumber(t.getUTCDate(),{unit:"date"}):Y(t,n)},D:function(t,n,e){var r=function(t){j(1,arguments);var n=T(t),e=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=e-n.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===n?e.ordinalNumber(r,{unit:"dayOfYear"}):q(r,n.length)},E:function(t,n,e){var r=t.getUTCDay();switch(n){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(t,n,e,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return q(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(t,n,e,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return q(a,n.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(t,n,e){var r=t.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return q(o,n.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(t,n,e){var r=t.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,n,e){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,n,e){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,n,e){if("ho"===n){var r=t.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return z(t,n)},H:function(t,n,e){return"Ho"===n?e.ordinalNumber(t.getUTCHours(),{unit:"hour"}):F(t,n)},K:function(t,n,e){var r=t.getUTCHours()%12;return"Ko"===n?e.ordinalNumber(r,{unit:"hour"}):q(r,n.length)},k:function(t,n,e){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===n?e.ordinalNumber(r,{unit:"hour"}):q(r,n.length)},m:function(t,n,e){return"mo"===n?e.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):H(t,n)},s:function(t,n,e){return"so"===n?e.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):O(t,n)},S:function(t,n){return Q(t,n)},X:function(t,n,e,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return G(o);case"XXXX":case"XX":return X(o);default:return X(o,":")}},x:function(t,n,e,r){var o=(r._originalDate||t).getTimezoneOffset();switch(n){case"x":return G(o);case"xxxx":case"xx":return X(o);default:return X(o,":")}},O:function(t,n,e,r){var o=(r._originalDate||t).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+R(o,":");default:return"GMT"+X(o,":")}},z:function(t,n,e,r){var o=(r._originalDate||t).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+R(o,":");default:return"GMT"+X(o,":")}},t:function(t,n,e,r){var o=r._originalDate||t;return q(Math.floor(o.getTime()/1e3),n.length)},T:function(t,n,e,r){return q((r._originalDate||t).getTime(),n.length)}};function R(t,n){var e=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return e+String(o);var i=n||"";return e+String(o)+i+q(a,2)}function G(t,n){return t%60==0?(t>0?"-":"+")+q(Math.abs(t)/60,2):X(t,n)}function X(t,n){var e=n||"",r=t>0?"-":"+",o=Math.abs(t);return r+q(Math.floor(o/60),2)+e+q(o%60,2)}const Z=$;var J=function(t,n){switch(t){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},_=function(t,n){switch(t){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const V={p:_,P:function(t,n){var e,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return J(t,n);switch(o){case"P":e=n.dateTime({width:"short"});break;case"PP":e=n.dateTime({width:"medium"});break;case"PPP":e=n.dateTime({width:"long"});break;default:e=n.dateTime({width:"full"})}return e.replace("{{date}}",J(o,n)).replace("{{time}}",_(a,n))}};var K=["D","DD"],tt=["YY","YYYY"];function nt(t,n,e){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var et={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function rt(t){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=n.width?String(n.width):t.defaultWidth;return t.formats[e]||t.formats[t.defaultWidth]}}const ot={date:rt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:rt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:rt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var at={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function it(t){return function(n,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=e&&e.width?String(e.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,s=null!=e&&e.width?String(e.width):t.defaultWidth;r=t.values[s]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(n):n]}}const st={ordinalNumber:function(t,n){var e=Number(t),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:it({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:it({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:it({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:it({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:it({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function dt(t){return function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=n.match(o);if(!a)return null;var i,s=a[0],d=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(d)?function(t,n){for(var e=0;e<t.length;e++)if(t[e].test(s))return e}(d):function(t,n){for(var e in t)if(t.hasOwnProperty(e)&&t[e].test(s))return e}(d);return i=t.valueCallback?t.valueCallback(c):c,{value:i=e.valueCallback?e.valueCallback(i):i,rest:n.slice(s.length)}}}var ct,lt={ordinalNumber:(ct={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.match(ct.matchPattern);if(!e)return null;var r=e[0],o=t.match(ct.parsePattern);if(!o)return null;var a=ct.valueCallback?ct.valueCallback(o[0]):o[0];return{value:a=n.valueCallback?n.valueCallback(a):a,rest:t.slice(r.length)}}),era:dt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:dt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:dt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:dt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:dt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const At={code:"en-US",formatDistance:function(t,n,e){var r,o=et[t];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:ot,formatRelative:function(t,n,e,r){return at[t]},localize:st,match:lt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ut=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,mt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gt=/^'([^]*?)'?$/,pt=/''/g,ht=/[a-zA-Z]/;function ft(t,n,e){var r,o,a,i,s,d,c,l,A,u,m,g,p,h,f,b,C,v;j(2,arguments);var B=String(n),y=D(),I=null!==(r=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:y.locale)&&void 0!==r?r:At,k=E(null!==(a=null!==(i=null!==(s=null!==(d=null==e?void 0:e.firstWeekContainsDate)&&void 0!==d?d:null==e||null===(c=e.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:y.firstWeekContainsDate)&&void 0!==i?i:null===(A=y.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=E(null!==(m=null!==(g=null!==(p=null!==(h=null==e?void 0:e.weekStartsOn)&&void 0!==h?h:null==e||null===(f=e.locale)||void 0===f||null===(b=f.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==p?p:y.weekStartsOn)&&void 0!==g?g:null===(C=y.locale)||void 0===C||null===(v=C.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==m?m:0);if(!(w>=0&&w<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!I.localize)throw new RangeError("locale must contain localize property");if(!I.formatLong)throw new RangeError("locale must contain formatLong property");var S=T(t);if(!function(t){if(j(1,arguments),!function(t){return j(1,arguments),t instanceof Date||"object"===x(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var n=T(t);return!isNaN(Number(n))}(S))throw new RangeError("Invalid time value");var P=function(t){var n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),t.getTime()-n.getTime()}(S),M=function(t,n){return j(2,arguments),function(t,n){j(2,arguments);var e=T(t).getTime(),r=E(n);return new Date(e+r)}(t,-E(n))}(S,P),L={firstWeekContainsDate:k,weekStartsOn:w,locale:I,_originalDate:S};return B.match(mt).map((function(t){var n=t[0];return"p"===n||"P"===n?(0,V[n])(t,I.formatLong):t})).join("").match(ut).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(gt))?a[1].replace(pt,"'"):o;var s,d=Z[i];if(d)return null!=e&&e.useAdditionalWeekYearTokens||(s=r,-1===tt.indexOf(s))||nt(r,n,String(t)),null!=e&&e.useAdditionalDayOfYearTokens||!function(t){return-1!==K.indexOf(t)}(r)||nt(r,n,String(t)),d(M,r,I.localize,L);if(i.match(ht))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}class bt{constructor(t,n=ft(new Date,"MM/dd/yyyy")){this.name=t,this.date=n}getNote=()=>this.name;setNote=t=>{this.name=t}}class Ct{constructor(t,n,e=!1){this.name=t,this.dueDate=n,this.isCompleted=e}getName=()=>this.name;setName=t=>{this.name=t};getStatus=()=>this.isCompleted;setStatus=t=>{this.isCompleted=t};getDate=()=>ft(new Date(this.dueDate),"PP");setDate=t=>{this.dueDate=t};getNewDate=()=>`${new Date(this.dueDate).getFullYear()}-${new Date(this.dueDate).getMonth()}-${new Date(this.dueDate).getDate()}`;isToday=()=>{const t=new Date;return t.getFullYear()===new Date(this.dueDate).getFullYear()&&t.getMonth()===new Date(this.dueDate).getMonth()&&t.getDate()===new Date(this.dueDate).getDate()};isAfter=()=>{const t=new Date;return function(t,n){j(2,arguments);var e=T(t),r=T(n);return e.getTime()>r.getTime()}(new Date(this.dueDate),t)}}class vt{static saveTodoList(t){localStorage.setItem("TodoList",JSON.stringify(t))}static getTodoList(){const t=Object.assign(new w,JSON.parse(localStorage.getItem("TodoList")));return t.setProjects(t.getProjects().map((t=>Object.assign(new k,t)))),t.getProjects().forEach((t=>{t.setNotes(t.getNotes().map((t=>Object.assign(new bt,t))))})),t.getProjects().forEach((t=>{t.setTasks(t.getTasks().map((t=>Object.assign(new Ct,t))))})),t}static remove(t){const n=this.getTodoList();n.remove(t),this.saveTodoList(n),location.reload()}static addProject(t,n){const e=this.getTodoList();e.add(t,n),this.saveTodoList(e)}static readProject(t){return this.getTodoList().getProject(t)}static addNote(t,n){const e=this.getTodoList();e.getProject(n).getNotes().push(new bt(t)),this.saveTodoList(e)}static readNote(t,n){var e;return this.getTodoList().getProject(t.toLowerCase()).getNotes().forEach((t=>{t.getNote()===n&&(e=t)})),e}static deleteNote(t,n){let e;this.getTodoList().getProject(n).getNotes().forEach(((n,r)=>{n.name==t&&(e=r)}));const r=this.getTodoList();r.getProject(n).getNotes().splice(e,1),this.saveTodoList(r)}static addTask(t,n,e){let r=this.getTodoList();r.getProject(e).getTasks().push(new Ct(t,n)),this.saveTodoList(r)}static readTask(t,n){var e={};return this.getTodoList().getProject(t.toLowerCase()).getTasks().forEach((t=>{t.getName()===n&&(e=t)})),e}static deleteTask(t,n){let e;this.getTodoList().getProject(n).getTasks().forEach(((n,r)=>{n.getName()===t&&(e=r)}));const r=this.getTodoList();r.getProject(n).getTasks().splice(e,1),this.saveTodoList(r)}static editTask(t,n,e,r){let o=this.getTodoList();o.getProject(r).getTasks().forEach((r=>{r.getName()===t&&(r.setName(n),r.setDate(e),r.setStatus(!1))})),this.saveTodoList(o)}static toggleStatus(t,n){let e=this.getTodoList();e.getProject(n).getTasks().forEach((n=>{n.getName()===t&&(n.getStatus()?n.setStatus(!1):n.setStatus(!0))})),this.saveTodoList(e)}}addEventListener("DOMContentLoaded",class{static loadPage=()=>{this.loadHeader(),this.loadSideBar(),this.loadMainContent(),this.loadFooter(),this.sideBarButtons()};static loadIcons=()=>{this.getContentContainer.appendChild(I.getImage("calendar"))};static loadHeader=()=>{const t=document.getElementById("content"),n=document.createElement("header");n.innerHTML=`\n        <button class="mobile-nav-toggle" aria-controls="primary-navigation" aria-expanded="false">\n            <img src =${I.getImage("menu")} id="burger-menu" alt="menu" aria-hidden="true">\n            <img src =${I.getImage("close")} id="close-menu" alt="close" aria-hidden="false">\n        </button>\n        `,t.appendChild(n)};static navBar=()=>{const t=document.getElementById("content"),n=document.createElement("div");n.classList.add("side-bar","primary-navigation"),n.innerHTML=`\n        <h1 class= "title">Do it</h1>\n        <nav class="nav-bar-menu" id = "navigation-bar">\n            <ul class="nav-list" aria-label="primary" role="list">\n                <li id="inbox"><a class="nav-item">\n                        <img src = ${I.getImage("inbox")} class="nav-item-icon" alt= "Download icons created by Kiranshastry">\n                        <span>Inbox</span>\n                    </a>\n                </li>\n                <li id="today"><a class="nav-item">\n                        <img src = "${I.getImage("today")}" class="nav-item-icon" alt= "Download icons created by Kiranshastry">\n                        <span>Today</span>\n                    </a>\n                </li>        \n                <li id="upcoming"><a class="nav-item">\n                        <img src = ${I.getImage("upcoming")} class="nav-item-icon" alt= "Download icons created by Kiranshastry">\n                        <span>Upcoming</span>\n                    </a>\n                </li>\n            </ul>\n        </nav>`,t.appendChild(n)};static navProjectBar=()=>{const t=document.getElementById("navigation-bar"),n=document.createElement("div");n.classList.add("project-container"),n.innerHTML='<div class="project-nav-container">\n            <a class="project-nav-title">Projects</a>\n            <button class="add-project-btn" id ="add-project-btn">+</button>\n        </div>\n        <ul class="project-nav-list" id="projects">\n        </ul>\n        ',t.appendChild(n)};static toggleMobileNavBar=()=>{const t=document.querySelector(".side-bar"),n=document.querySelector("#burger-menu"),e=document.querySelector("#close-menu");null===t.getAttribute("data-visible")?(t.toggleAttribute("data-visible"),e.setAttribute("aria-hidden","true"),n.setAttribute("aria-hidden","false")):null!==t.getAttribute("data-visible")&&(t.toggleAttribute("data-visible"),e.setAttribute("aria-hidden","false"),n.setAttribute("aria-hidden","true"))};static sideBarButtons=()=>{document.querySelector(".mobile-nav-toggle").addEventListener("click",this.toggleMobileNavBar),Array.from(document.querySelector(".nav-list").children).forEach((t=>{t.addEventListener("click",(t=>{const n=document.querySelector(".body");this.removePage();const e=document.createElement("div");e.innerHTML=`\n                    <h2 class="page-title">${t.currentTarget.id.charAt(0).toUpperCase()+t.currentTarget.id.slice(1)}</h2>\n\n                    <div class="table">\n                        <div class= "col" id="task-name">\n                            <div class="row">\n                                <h3 class="row-title">Task</h3>\n                            </div> \n                        </div>\n                        <div class= "col" id="project-name">\n                            <div class="row">\n                                <h3 class="row-title">Project</h3>\n                            </div>\n                        </div>\n                        <div class= "col" id="date">\n                            <div class="row">\n                                <h3 class="row-title">Date</h3>\n                            </div>                             \n                        </div>\n                    </div>\n                        `,n.appendChild(e);const r=t=>{document.getElementById("task-name").innerHTML+=`\n                    <div class="row task-item-container">\n                        <button class="checkbox" id="task-check">\n                        ${this.isChecked(t)}\n                        </button>\n                        <p class="task-item-title">${t.getName()}</p>\n                    </div>\n                    `},o=(t,n)=>{var e,o;r(t),e=n,document.getElementById("project-name").innerHTML+=`\n                    <div class="row">\n                    <p>${e.getName()}</p>\n                </div>`,o=t,document.getElementById("date").innerHTML+=`\n                    <div class="row">\n                    <p>${o.getDate()}</p>\n                </div>\n                    `,document.querySelectorAll(".checkbox").forEach((t=>{t.addEventListener("click",(n=>{const e=n.currentTarget.parentNode.querySelector(".task-item-title").textContent;let r;vt.getTodoList().getProjects().forEach((t=>{t.getTasks().forEach((n=>{n.getName()==e&&(r=t.getName())}))})),this.toggleCompleteTask(e,r,t)}))}))};vt.getTodoList().getProjects().forEach((n=>{n.getTasks().forEach((e=>{"inbox"===t.currentTarget.id?o(e,n):"today"===t.currentTarget.id?e.isToday()&&o(e,n):(t.currentTarget.id="upcoming")&&e.isAfter()&&o(e,n)}))})),this.toggleMobileNavBar()}))})),this.createProjectBtn()};static removePage=()=>{const t=document.querySelector(".body");for(;t.firstChild;)t.removeChild(t.lastChild)};static createProjectBtn=()=>{document.querySelectorAll("#add-project-btn").forEach((t=>{t.addEventListener("click",this.loadProjectForm)}))};static loadProjectNames=()=>{const t=document.getElementById("projects"),n=vt.getTodoList().getProjects();null!=n&&n.length>0?vt.getTodoList().getProjects().forEach((n=>{t.appendChild(this.loadProjectName(n)),this.projectNameBtn(n.getName()),this.projectTrashBtn(n.getName())})):console.log("no project added")};static loadProjectName=t=>{const n=document.createElement("li");return n.classList.add("project-list-item"),n.setAttribute("id",`${t.name.toLowerCase()}`),n.innerHTML=`<a class="project-btn" id="btn-${t.name.toLowerCase()}">\n            <span>${t.name}</span></a>\n        <button class ="project-trash-btn" id="project-trash-btn-${t.name.toLowerCase()}">\n            <img src="${I.getImage("trash")}" class="project-trash">\n        </button>`,n};static projectTrashBtn=t=>{document.getElementById(`project-trash-btn-${t.toLowerCase()}`).addEventListener("click",this.deleteProject)};static projectNameBtn=t=>{document.getElementById(`btn-${t.toLowerCase()}`).addEventListener("click",this.loadNewProject)};static deleteProject=t=>{const n=t.currentTarget.id.split("-")[3];vt.remove(`${n}`)};static loadNewProject=t=>{const n=vt.readProject(t.currentTarget.id.split("-")[1]);this.removePage(),document.querySelector(".body").appendChild(this.sectionProject(n)),this.createProjectBtn(),this.projectPageBtns(),n.getNotes().forEach((t=>{this.sectionNote(t)})),n.getTasks().forEach((t=>{this.sectionTask(t)})),this.loadNoteBtns(),this.initTaskBtns(),this.toggleMobileNavBar()};static loadNoteBtns=()=>{document.querySelectorAll(".note-trash-btn").forEach((t=>{t.addEventListener("click",this.deleteNote)}))};static deleteNote=t=>{const n=t.currentTarget.parentNode.querySelector("p").textContent,e=document.querySelector(".project-title").textContent;vt.deleteNote(n,e),location.reload()};static taskBtn=t=>{};static deleteTask=t=>{const n=t.currentTarget.parentElement.parentElement.parentElement,e=n.querySelector(".task-item-title"),r=document.querySelector(".project-title").textContent,o=e.textContent;vt.deleteTask(o,r),n.remove()};static editTask=t=>{const n=t.currentTarget.parentElement.parentElement.parentElement,e=document.querySelectorAll(".task-item"),r=n.querySelector(".task-item-title").textContent,o=n.querySelector(".task-item-date").textContent,a=document.getElementById("project-tasks");let i;Array.from(a.children).forEach(((t,n)=>{t.querySelector(".task-item-title").textContent===r&&(i=n)})),e[i].classList.add("hidden"),a.insertBefore(this.editTaskForm(r,o),e[i]),document.getElementById("project-tasks-edit").querySelectorAll("button").forEach((t=>{t.addEventListener("click",(t=>{if("edit-submit"===t.currentTarget.id){let t=document.querySelector(".project-title").textContent,o=a.querySelector("#task-name").value,s=ft(new Date(a.querySelector("#task-date").value),"yyyy-MM-dd");vt.editTask(r,o,s,t.toLowerCase()),n.querySelector(".task-item-title").textContent=o,n.querySelector(".task-item-date").textContent=ft(new Date(s),"MMM dd, yyyy"),e[i].classList.remove("hidden"),a.querySelector("#project-tasks-edit").remove()}else"edit-cancel"===t.currentTarget.id&&(e[i].classList.remove("hidden"),document.getElementById("project-tasks-edit").remove())}))}))};static initTaskBtns=()=>{document.querySelectorAll(".task-item").forEach(((t,n)=>{t.querySelectorAll("button").forEach((t=>{t.addEventListener("click",(e=>{const r=document.querySelectorAll(".task-item")[n].querySelector(".task-item-title").textContent,o=document.querySelector(".project-title").textContent;"task-delete"===e.currentTarget.id?this.deleteTask(e):"task-edit"===e.currentTarget.id?this.editTask(e):"task-check"===e.currentTarget.id&&this.toggleCompleteTask(r,o,t)}))}))}))};static toggleCompleteTask=(t,n,e)=>{vt.toggleStatus(t,n),vt.getTodoList().getProject(n).getTasks().forEach((n=>{if(n.getName()===t)if(n.getStatus()){const t=new Image;t.src=I.getImage("checkMark"),e.appendChild(t)}else e.querySelector("img").remove()}))};static sectionNote=t=>{const n=document.getElementById("project-notes"),e=document.createElement("li");e.classList.add("note-item"),e.innerHTML=`\n                <p>${t.getNote()}</p>\n                <button class="note-trash-btn" id="trash-title">\n                    <img src = ${I.getImage("trash")}\n                </button>`,n.appendChild(e)};static loadSideBar=()=>{this.navBar(),this.navProjectBar(),this.loadProjectNames()};static isChecked=t=>!0===t.getStatus()?`<img src= "${I.getImage("checkMark")}">`:"";static sectionTask=t=>{document.getElementById("project-tasks").innerHTML+=`\n        <li class="task-item">\n        <div class="task-item-container">\n            <button class="checkbox" id="task-check">\n                ${this.isChecked(t)}\n            </button>\n            <span class="task-item-title">${t.getName()}</span>\n\n        </div>\n        <div class="task-item-mov-toggle">\n            <div class="task-item-container task-item-mov-toggle">\n                <p class="task-item-date">${t.getDate()}</p>\n                <button class="task-item-btn" id ="task-edit">\n                    <img src = "${I.getImage("edit")}" alt="editing">\n                </button>\n                <button class="task-item-btn" id="task-delete">\n                    <img src= ${I.getImage("trash")} alt="trash">\n                </button>\n            </div>\n            \n        </div>\n    </li>`};static loadProjectForm=t=>{document.querySelector(".body").appendChild(this.projectForm()),this.initProjectButtons()};static projectForm=()=>{const t=document.createElement("div");return t.classList.add("add-project-window"),t.innerHTML='\n        <div class="add-project">\n            <button class="close-btn">x</button>\n            <h2>Add a project</h2>\n            <div class="form-item">\n                <label class="form-items" for="pname" required>Project Name</label>\n                <input type="text" id="pname" name="pname" placeholder ="property Investment">\n            </div>\n            <div class="form-item">\n                <label class="form-items" for="pdesc">Description</label>\n                <textarea name ="pdesc" id="pdesc" maxlength="200" placeholder="Fund some money to buy a new house"></textarea>\n            </div>\n            <button class="add-project-submit-btn">Submit</button>\n        </div>',t};static initProjectButtons=()=>{document.querySelector(".add-project-submit-btn").addEventListener("click",(()=>{const t=document.getElementById("pname").value,n=document.getElementById("pdesc").value;vt.addProject(t,n),this.closeWindow(),location.reload()})),document.querySelector(".close-btn").addEventListener("click",this.closeWindow)};static closeWindow=()=>{document.querySelector(".add-project-window").remove()};static loadMainContent=()=>{const t=document.getElementById("content"),n=vt.getTodoList().getProjects().length;if(console.log(n),0===n){const n=document.createElement("div");n.classList.add("body");const e=document.createElement("div");e.setAttribute("id","intro-page"),e.innerHTML='\n                <div class="intro-container">\n                <h1 class="title">Welcome to "Do it"</h1>\n                <p>A solution to help you effortlessly manage your tasks and stay organized like never before.</p>\n                </div>\n                <button class="project-btn-primary" id="add-project-btn">Create a project</button>',n.appendChild(e),t.appendChild(n)}else{const n=document.createElement("div");n.classList.add("body"),n.appendChild(this.sectionProject(vt.getTodoList().getProjects()[0])),t.appendChild(n),vt.getTodoList().getProjects()[0].getNotes().forEach((t=>{this.sectionNote(t)})),vt.getTodoList().getProjects()[0].getTasks().forEach((t=>{this.sectionTask(t),console.log(t.getStatus())})),this.projectPageBtns(),this.loadNoteBtns(),this.initTaskBtns()}this.createProjectBtn()};static projectPageBtns=()=>{document.querySelectorAll(".task-toggle-btn").forEach((t=>{t.addEventListener("click",(t=>{"note-btn"==t.currentTarget.id?this.toggleForms("project-notes-input"):"task-btn"==t.currentTarget.id&&this.toggleForms("project-tasks-input")}))})),document.querySelector(".note-cancel-btn").addEventListener("click",(()=>{this.toggleForms("project-notes-input")})),document.querySelector(".todo-cancel-btn").addEventListener("click",(()=>{this.toggleForms("project-tasks-input")})),document.querySelector(".note-submit-btn").addEventListener("click",(()=>{const t=document.querySelector(".note-input"),n=document.querySelector(".project-title").textContent;if(""!=t.value){vt.addNote(t.value,n);var e=vt.readNote(n,t.value);this.sectionNote(e);const r=document.querySelectorAll(".note-item");r[r.length-1].querySelector("button").addEventListener("click",this.deleteNote),t.value="",this.toggleForms("project-notes-input")}else alert("Please input a note")})),document.querySelector(".todo-submit-btn").addEventListener("click",(()=>{const t=document.querySelector(".project-title").textContent,n=document.getElementById("task-name").value,e=document.getElementById("task-date").value;if(""!=n){vt.addTask(n,e,t);var r=vt.readTask(t,n);this.sectionTask(r),document.getElementById("project-tasks-input").remove()}}))};static toggleForms=t=>{document.getElementById(t).classList.toggle("hidden")};static loadProjects=()=>{const t=document.createElement("div");return t.classList.add("body"),0===vt.getTodoList().getProjects().length?t.appendChild(this.mainPage()):t.appendChild(this.sectionProject(vt.getTodoList().getProjects()[0])),t};static mainPage=()=>{const t=document.createElement("div");return t.setAttribute("id","intro-page"),t.innerHTML='\n            <div class="intro-container">\n            <h1 class="title">Welcome to "Do it"</h1>\n            <p>A solution to help you effortlessly manage your tasks and stay organized like never before.</p>\n            </div>\n            <button class="project-btn-primary" id="add-project-btn">Create a project</button>',t};static sectionProject=t=>{const n=document.createElement("div"),e=t.getName().toLowerCase();return n.classList.add("project-page"),n.setAttribute("id",`project-${e}`),n.innerHTML=`\n        <div class="project-header">\n            <h2 class="project-title">${t.name}</h2>\n            <p class="project-description">${t.description}</p>\n        </div>\n        <div class= "project-task" id="notes">\n            <div class= "note-container">\n                <h3 class="note-title">Notes</h3>\n                <button class="task-toggle-btn" id="note-btn">+</button>\n            </div>   \n            <ul class="note-list" id="project-notes">\n            </ul>\n            <div class= "item-input hidden" id="project-notes-input">\n                <div class="input-container">\n                    <input class="note-input" type="text" name="description" required></textarea>\n                </div>\n                <div class="todo-nav-container">\n                    <button class="submit-button note-submit-btn">Add</button>\n                    <button class="cancel-button note-cancel-btn">Cancel</button>\n                </div>\n            </div>\n            \n        </div>\n\n        <div class="project-task" id="tasks">\n            <div class="task-container">\n                <h3 class="task-title">My todo list</h3>\n                <button class="task-toggle-btn" id="task-btn">+</button>\n            </div>\n            <ul class="task-list" id="project-tasks">\n            </ul>\n            <div class="item-input hidden" id="project-tasks-input">\n                <div class="input-container">\n                    <input class="todo-input" id="task-name" type="text" name ="todo" required>\n                    <input class="todo-input" id="task-date" type="date" name="date"s required>\n                </div>\n\n                <div class="todo-nav-container">\n                    <button class="submit-button todo-submit-btn">Add</button>\n                    <button class="cancel-button todo-cancel-btn">Cancel</button>\n                </div>\n            </div>\n        \n        </div>\n\n        `,n};static editTaskForm=(t,n)=>{const e=document.createElement("div");return e.classList.add("item-input"),e.setAttribute("id","project-tasks-edit"),e.innerHTML=`\n            <div class="input-container">\n                <input class="todo-input" id="task-name" type="text" name ="todo" value="${t}" required>\n                <input class="todo-input" id="task-date" type="date" name= "date" value ="${ft(new Date(n),"yyyy-MM-dd")}" required>\n            </div>\n            <div class="todo-nav-container">\n                <button class="submit-button todo-submit-btn" id="edit-submit">Add</button>\n                <button class="cancel-button todo-cancel-btn" id="edit-cancel">Cancel</button>\n            </div>\n            `,e};static loadFooter=()=>{const t=document.querySelector(".side-bar"),n=new Date,e=document.createElement("footer");e.innerHTML=`\n        <div class="footer-container">\n            <p class="attributes">This is an Odin Project</p>\n            <p class="attributes">Icons created by<a href="https://www.flaticon.com/" title="flaticon icons">\n            Freepik - Flaticon</a></p>\n            <p class="attributes">Copyright &copy ${n.getFullYear()}</p>\n        </div>\n        `,t.appendChild(e)}}.loadPage())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,